#!/usr/bin/env python3
"""
Generate junit formatted file from given plain text log file.
"""

import re

from junit_xml import TestSuite, TestCase

from tools.parser import get_parser


def get_args():
    """parse argument"""

    parser = get_parser()
    parser.add_argument(
        "-i",
        "--input",
        dest="input",
        help="unittest result log file",
        required=True,
    )
    parser.add_argument(
        "-o",
        "--output",
        dest="output",
        default="out.xml",
        help="junit format output file name",
    )
    return parser.parse_args()


def get_log(filepath):
    """read file content"""

    with open(filepath, "r") as f:
        return f.read()


def remove_ansi_escape(content):
    """remove ansi escape from string"""

    regex = re.compile(r"\x1b[^m]*m")
    return regex.sub("", content)


def log_to_junit(results):
    """convert unittest result to junit format"""

    test_cases = []
    testcase = ""
    for line in results:
        if "RUN" in line:
            testcase = line.replace(" ", "").split("]")[1]
            continue
        elif "OK" in line:
            cycles, sec = map(str, re.findall(r"(\d+(?:\.\d+)?)", line))
            # use usec as time
            tc = TestCase(
                testcase, None, elapsed_sec=float(sec)*1000000, log=f"{cycles} cycles"
            )
        elif "NG" in line:
            err_msg = re.findall(r"Failed.*", line)[0]
            tc = TestCase(testcase)
            tc.add_failure_info(err_msg)
        elif "SK" in line:
            tc = TestCase(testcase)
            tc.add_skipped_info("skipped")
        else:
            continue
        test_cases.append(tc)
    return TestSuite("unittest", test_cases)


if __name__ == "__main__":
    args = get_args()

    outputs = remove_ansi_escape(get_log(args.input)).split("\n")

    # generate junit format
    ts = log_to_junit(outputs)

    with open(args.output, "w") as f:
        TestSuite.to_file(f, [ts], prettyprint=True)
