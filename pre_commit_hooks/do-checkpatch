#!/usr/bin/env python3

import sys
import os
import re

from tools.parser import get_args
from tools.git_diff import get_diff
from tools.cmd import run
from tools.console import Console
from tools.message import get_retry_msg
from tools.constant import GIT_DIFF_CACHED, CHECKPATCH, SPELLFILE


def check_patch(diff, verbose=False):
    """Run checkpatch.pl to check coding style

    Args:
        diff(str): git revision diff string
        verbose(bool): show debug log if True.
    """

    try:
        dir_path = f"{os.path.dirname(os.path.realpath(__file__))}"
        cmd = [
            f"{dir_path}/{CHECKPATCH}",
            "--codespell",
            f"--codespellfile={dir_path}/{SPELLFILE}",
            "--color=always",
        ]
        res = run(cmd, input=diff)
        result = res.stdout.decode("utf-8")
        if verbose:
            Console.info(result)

        # parse logs
        if len(result) > 0:
            results = re.findall("\d+ [A-z]+, \d+ [A-z]+, \d+ [A-z]+", result)
            errors, warnings, checks = map(int, re.findall("\d+", results[0]))

            retry_msg = get_retry_msg(GIT_DIFF_CACHED, " ".join(cmd))

            if errors > 0:
                Console.error("[ERROR] " + retry_msg)
                raise Exception("checkpatch.pl error")
            if warnings > 0:
                Console.warn("[WARN] " + retry_msg)

    except FileNotFoundError:
        Console.error("[ERROR] checkpatch.pl not found.")
        return

if __name__ == "__main__":
    """Check code if satisfied with linux coding style"""

    try:
        args = get_args()

        diff = get_diff(cached=True)
        check_patch(diff, verbose=args.verbose)

    except Exception as e:
        print(e)
        sys.exit(1)
